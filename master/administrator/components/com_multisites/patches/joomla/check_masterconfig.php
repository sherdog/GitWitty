<?php
/**
 * @file       check_masterconfig.php
 * @brief      Check if the Master configuration file contain the MultiSites wrapper
 * @version    1.2.24
 * @author     Edwin CHERONT     (e.cheront@jms2win.com)
 *             Edwin2Win sprlu   (www.jms2win.com)
 * @copyright  Joomla Multi Sites
 *             Single Joomla! 1.5.x installation using multiple configuration (One for each 'slave' sites).
 *             (C) 2008-2010 Edwin2Win sprlu - all right reserved.
 * @license    This program is free software; you can redistribute it and/or
 *             modify it under the terms of the GNU General Public License
 *             as published by the Free Software Foundation; either version 2
 *             of the License, or (at your option) any later version.
 *             This program is distributed in the hope that it will be useful,
 *             but WITHOUT ANY WARRANTY; without even the implied warranty of
 *             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *             GNU General Public License for more details.
 *             You should have received a copy of the GNU General Public License
 *             along with this program; if not, write to the Free Software
 *             Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *             A full text version of the GNU GPL version 2 can be found in the LICENSE.php file.
 * @par History:
 * - V1.0.2 02-AUG-2008: File creation
 * - V1.1.0 07-NOV-2008: Change the master config wrapper to use the new slave site matching.
 * - V1.2.14 20-OCT-2009: Use the JPATH_ROOT in the patch when it is defined.
 * - V1.2.21 15-DEC-2009: Add an alternate algorithm when the "? >" end PHP marker is not present
 *                        Assume that the PHP end marker is the end of the file.
 *                        This allow processing the "configuration.php" file generated by fantastico.
 * - V1.2.23 05-JAN-2010: Add detection on double JMS wrapper installation.
 * - V1.2.24 05-JAN-2010: Fix implementatin of the double JMS wrapper processing.
 */

defined('JPATH_MUTLISITES_COMPONENT') or die( 'Restricted access' );

//------------ jms2win_checkMasterConfig ---------------
/**
 * check if 'MULTISITES_' is present
 */
function jms2win_checkMasterConfig( $model, $file)
{
	$filename = JPath::clean( JPATH_ROOT.DS.$file);
	if ( !file_exists( $filename)) {
	   return '[NOK]|File Not Found';
	}
   $str = file_get_contents( $filename);
   
   $result = "";
   $rc = '[OK]';
   
   // if 'MULTISITES_' is present
   $pos = strpos( $str, 'MULTISITES_');
   if ($pos === false) {
	   $rc = '[NOK]';
      $result .= JText::_( 'The routing wrapper is not present in this MASTER configuration file.');
      $result .= '|[ACTION]';
      $result .= '|Add 16 lines containing the routing wrapper to the slave site.';
   }
   else {
      // Check if this is older implementation that does not use Jms2Win::matchSlaveSite
      $pos = strpos( $str, 'Jms2Win::matchSlaveSite');
      if ($pos === false) {
   	   $rc = '[NOK]';
         $result .= JText::_( 'The routing wrapper Version 1.0.x is present in this MASTER configuration file and must be replaces by the version 1.1.x.');
         $result .= '|[ACTION]';
         $result .= '|Replace the older wrapper (12 lines) by the new wrapper (16 lines) that add routing with domain containing sub-directories.';
      }
      else {
         // Check if this is JPATH_ROOT is present
         $p2 = strpos( $str, 'JPATH_ROOT');
         if ($p2 === false) {
      	   $rc = '[NOK]';
            $result .= JText::_( 'The routing wrapper Version 1.1.x is present in this MASTER configuration file and must be replaces by the version 1.2.14 or higher.');
            $result .= '|[ACTION]';
            $result .= '|Replace 2 lines to use JPATH_ROOT when present.';
         }
         // Check if a double Multisites wrapper is present ("Jms2Win::matchSlaveSite" present twice)
         else {
            $p2 = strpos( $str, 'Jms2Win::matchSlaveSite', $pos+1);
            if ($p2 === false) {}
            else {
         	   $rc = '[NOK]';
               $result .= JText::_( 'The double Multisites routing wrapper is detected in the MASTER configuration file and must be fixed.');
               $result .= '|[ACTION]';
               $result .= '|You can either go in your <a href="index.php?option=com_config">global configuration</a> and resave the configuration.';
               $result .= '|OR try installing the patch here.';
               $result .= '|If you just have this file in error, we recommend that you try resaving the <a href="index.php?option=com_config">Global Configuration</a> first.';
            }
         }
      }
   }
   
   return $rc .'|'. $result;
}

//------------ jms2win_actionMasterConfig ---------------
/**
 * @brief Install the patch
 */
function jms2win_actionMasterConfig( $model, $file)
{
   include_once( dirname(__FILE__) .DS. 'patchloader.php');
   $patchStr = jms2win_loadPatch( 'patch_masterconfig.php');
   if ( $patchStr === false) {
      return false;
   }

//	$filename = JPATH_ROOT.DS.$file;
	$filename = JPath::clean( JPATH_ROOT.DS.$file);
   $content = file_get_contents( $filename);
   if ( $content === false) {
      return false;
   }
   
   // Search/Replace the statement
   /*
      ===========
      Search for:
      ===========
      class JConfig {
      
      ===========
      and Replace by:
      ===========
      if ( !defined( 'MULTISITES_ID')) {
         if ( !defined( 'JPATH_MULTISITES')) define( 'JPATH_MULTISITES', (defined( 'JPATH_ROOT') ? JPATH_ROOT : dirname(__FILE__)) .DIRECTORY_SEPARATOR. 'multisites');
         if ( !defined( '_EDWIN2WIN_')) define( '_EDWIN2WIN_', true);
         @include( (defined( 'JPATH_ROOT') ? JPATH_ROOT : dirname(__FILE__)) .DIRECTORY_SEPARATOR. 'includes' .DIRECTORY_SEPARATOR. 'multisites.php');
         if ( class_exists( 'Jms2Win')) Jms2Win::matchSlaveSite();
      }
      if ( (!isset( $MULTISITES_FORCEMASTER) || !$MULTISITES_FORCEMASTER)
        && defined( 'MULTISITES_ID')
        && file_exists(MULTISITES_CONFIG_PATH .DIRECTORY_SEPARATOR. 'configuration.php')) {
         require_once( MULTISITES_CONFIG_PATH .DIRECTORY_SEPARATOR. 'configuration.php');
      } else if ( !class_exists( 'JConfig')) {
      class JConfig {

   */
   
    
   // ------------- Remove older Patch definition ----------------

   // If older patch (v1.0.x) is present MULTISITES_ID is present and NOT Jms2Win::matchSlaveSite
   // Or older patch (v1.1.x) is present MULTISITES_ID and Jms2Win::matchSlaveSite is present and NOT JPATH_ROOT
   // P0: Search begin statement: "class"
   $p0 = strpos( $content, 'MULTISITES_ID');
   if ( $p0 === false) {}
   else {
      $p1 = strpos( $content, 'Jms2Win::matchSlaveSite');
      if ( $p1 === false) {
         // P0: Go to Begin of line
         for ( ; $p0 > 0 && $content[$p0] != "\n"; $p0--);
         $p0++;

         // P2: Search begin statement: "class"
         $p2 = strpos( $content, 'class ', $p0);
         if ( $p2 === false) {
            return false;
         }

         // P2: Search begin statement: "}"
         $p3 = strpos( $content, '}', $p2);
         if ( $p3 === false) {
            return false;
         }
         
         // Remove the older patch
         $content = substr( $content, 0, $p0)
                  . substr( $content, $p2, $p3-$p2)
                  . substr( $content, $p3+1)
                  ;
      }
      else {
         $p1 = strpos( $content, 'JPATH_ROOT');
         if ( $p1 === false) {
            // Remove potential exising patches
            $content = jms2win_removePatch( $content);
         }

         // If previous patch was not removed
         $p0 = strpos( $content, 'MULTISITES_ID');
         if ( $p0 === false) {}
         else {
            // Try an alternate algorithm
            // P2: Search begin statement: "class JConfig"
            $p2 = strpos( $content, 'class JConfig', $p0);
            if ( $p2 === false) {
               return false;
            }
   
            // P2: Search begin statement: "}"
            $p3 = strpos( $content, '}', $p2);
            if ( $p3 === false) {
               return false;
            }
            
            // Remove the older patch
            $content = '<'.'?php'."\n"
                     . substr( $content, $p2, $p3-$p2+1)
                     . "\n"
                     . '?'.'>'."\n"
                     ;
         }
      }
   }

   // ------------- Patch definition ----------------
   /* ....\n
      class ... ?>
      p0        p1
      
      Produce
      begin -> p0 + INSERT PATCH + p0 -> p1 + } + p1 -> end
      
    */

   // P0: Search begin statement: "class"
   $p0 = strpos( $content, 'class');
   if ( $p0 === false) {
      return false;
   }
   // P0: Go to Begin of line
   for ( ; $p0 > 0 && $content[$p0] != "\n"; $p0--);
   $p0++;
   
   // p1: Search for end of PHP code
   $p1 = strpos( $content, '?'.'>', $p0);
   if ( $p1 === false) {
      // When there is no end of PHP code (case of configuration.php generated by fantastico)
      // Consider the last character of the file as the end of PHP code
      $p1 = strlen( $content);
   }

   $closeIf = "//_jms2win_begin\n"
            . "}\n"
            . "//_jms2win_end\n"
            ;


   // ------------- Compute the results ----------------
   // Here, we have found the statement to patch
   $result = substr( $content, 0, $p0)
           . $patchStr
           . substr( $content, $p0, $p1-$p0)
           . $closeIf
           . substr( $content, $p1);

   // ------------- Write the PATCH results ----------------

	// Set FTP credentials, if given
	jimport('joomla.client.helper');
	JClientHelper::setCredentialsFromRequest('ftp');
	$ftp = JClientHelper::getCredentials('ftp');

	// Try to make configuration.php writeable
	jimport('joomla.filesystem.path');
	if (!$ftp['enabled'] && JPath::isOwner($filename) && !JPath::setPermissions($filename, '0644')) {
		JError::raiseNotice('SOME_ERROR_CODE', 'Could not make configuration.php writable');
	}
	
	// Write the new content
	jimport('joomla.filesystem.file');
	if ( !JFile::write( $filename, $result)) {
      return false;
	}

	// Try to make configuration.php unwriteable
	if ( !$ftp['enabled'] && JPath::isOwner($filename) && !JPath::setPermissions($filename, '0444')) {
		JError::raiseNotice('SOME_ERROR_CODE', 'Could not make configuration.php unwritable');
	}
   
   return true;
}
